# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.entrySetForEach

# Run progress: 0.00% complete, ETA 00:00:49
# Fork: 1 of 1
# Warmup Iteration   1: 1145834.427 ns/op
# Warmup Iteration   2: 1047608.433 ns/op
Iteration   1: 501690.242 ns/op
Iteration   2: 441711.928 ns/op
Iteration   3: 395147.575 ns/op
Iteration   4: 411135.605 ns/op
Iteration   5: 451497.421 ns/op


Result "com.maoqifan.collections.HashMapTest.entrySetForEach":
  440236.554 ±(99.9%) 158595.830 ns/op [Average]
  (min, avg, max) = (395147.575, 440236.554, 501690.242), stdev = 41186.833
  CI (99.9%): [281640.724, 598832.384] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.entrySetIterator

# Run progress: 14.29% complete, ETA 00:00:46
# Fork: 1 of 1
# Warmup Iteration   1: 743836.410 ns/op
# Warmup Iteration   2: 520268.703 ns/op
Iteration   1: 689621.926 ns/op
Iteration   2: 479422.107 ns/op
Iteration   3: 402421.969 ns/op
Iteration   4: 361341.518 ns/op
Iteration   5: 357359.908 ns/op


Result "com.maoqifan.collections.HashMapTest.entrySetIterator":
  458033.485 ±(99.9%) 533101.541 ns/op [Average]
  (min, avg, max) = (357359.908, 458033.485, 689621.926), stdev = 138444.777
  CI (99.9%): [≈ 0, 991135.027] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.keySetForEach

# Run progress: 28.57% complete, ETA 00:00:38
# Fork: 1 of 1
# Warmup Iteration   1: 678296.629 ns/op
# Warmup Iteration   2: 739944.513 ns/op
Iteration   1: 1021483.184 ns/op
Iteration   2: 483075.570 ns/op
Iteration   3: 481446.571 ns/op
Iteration   4: 459557.119 ns/op
Iteration   5: 491280.630 ns/op


Result "com.maoqifan.collections.HashMapTest.keySetForEach":
  587368.615 ±(99.9%) 935557.224 ns/op [Average]
  (min, avg, max) = (459557.119, 587368.615, 1021483.184), stdev = 242961.240
  CI (99.9%): [≈ 0, 1522925.839] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.keySetIterator

# Run progress: 42.86% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 778225.687 ns/op
# Warmup Iteration   2: 514799.721 ns/op
Iteration   1: 513553.636 ns/op
Iteration   2: 494670.740 ns/op
Iteration   3: 468279.097 ns/op
Iteration   4: 453489.277 ns/op
Iteration   5: 439128.106 ns/op


Result "com.maoqifan.collections.HashMapTest.keySetIterator":
  473824.171 ±(99.9%) 116495.225 ns/op [Average]
  (min, avg, max) = (439128.106, 473824.171, 513553.636), stdev = 30253.440
  CI (99.9%): [357328.946, 590319.397] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.mapForEach

# Run progress: 57.14% complete, ETA 00:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 643212.515 ns/op
# Warmup Iteration   2: 491055.134 ns/op
Iteration   1: 499296.137 ns/op
Iteration   2: 488440.025 ns/op
Iteration   3: 458998.715 ns/op
Iteration   4: 457545.289 ns/op
Iteration   5: 515269.614 ns/op


Result "com.maoqifan.collections.HashMapTest.mapForEach":
  483909.956 ±(99.9%) 97344.967 ns/op [Average]
  (min, avg, max) = (457545.289, 483909.956, 515269.614), stdev = 25280.179
  CI (99.9%): [386564.989, 581254.923] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.streamMultiThread

# Run progress: 71.43% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 1731311.907 ns/op
# Warmup Iteration   2: 1096910.689 ns/op
Iteration   1: 1124814.565 ns/op
Iteration   2: 1408794.916 ns/op
Iteration   3: 1289736.117 ns/op
Iteration   4: 1105150.038 ns/op
Iteration   5: 1016317.886 ns/op


Result "com.maoqifan.collections.HashMapTest.streamMultiThread":
  1188962.704 ±(99.9%) 607094.230 ns/op [Average]
  (min, avg, max) = (1016317.886, 1188962.704, 1408794.916), stdev = 157660.444
  CI (99.9%): [581868.474, 1796056.934] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 17.0.5, Java HotSpot(TM) 64-Bit Server VM, 17.0.5+9-LTS-191
# VM invoker: /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=57281:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.maoqifan.collections.HashMapTest.streamSingleThread

# Run progress: 85.71% complete, ETA 00:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 6933.600 ns/op
# Warmup Iteration   2: 6724.773 ns/op
Iteration   1: 5857.636 ns/op
Iteration   2: 5522.472 ns/op
Iteration   3: 5549.324 ns/op
Iteration   4: 5510.461 ns/op
Iteration   5: 5560.735 ns/op


Result "com.maoqifan.collections.HashMapTest.streamSingleThread":
  5600.126 ±(99.9%) 559.715 ns/op [Average]
  (min, avg, max) = (5510.461, 5600.126, 5857.636), stdev = 145.356
  CI (99.9%): [5040.410, 6159.841] (assumes normal distribution)


# Run complete. Total time: 00:00:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt        Score        Error  Units
HashMapTest.entrySetForEach     avgt    5   440236.554 ± 158595.830  ns/op
HashMapTest.entrySetIterator    avgt    5   458033.485 ± 533101.541  ns/op
HashMapTest.keySetForEach       avgt    5   587368.615 ± 935557.224  ns/op
HashMapTest.keySetIterator      avgt    5   473824.171 ± 116495.225  ns/op
HashMapTest.mapForEach          avgt    5   483909.956 ±  97344.967  ns/op
HashMapTest.streamMultiThread   avgt    5  1188962.704 ± 607094.230  ns/op
HashMapTest.streamSingleThread  avgt    5     5600.126 ±    559.715  ns/op
